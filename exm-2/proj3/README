==== AUTOMATIC
to just run things automatically:
        I've also included a "setup" for each problem on `problems.py`
        basically if you want to run part x.y you'd call `problems.probXdY()` on main.py
        e.g. if you want to run part 1.3 you'd call `problems.prob1d3()`
        it'll print out to `output_dir` directory a file named `<timestamp>_prob1d3.jpg`

==== FILES AND CONTENT

    main.py
        should have access to both `operations`, `utils`, and `problems`. basically, where you're decently guaranteed to be able to call any of the functions mentioned in this readme, as long as you do it under the `LOGIC` comment.

    operations.py
        where most of the project's logic is

    gradFusion.py
        logic for part 2

    utils.py
        just shortcuts to read images, plot images, save images, save images on test directory, etc.

    align_image_code.py
        starter code given for part 1.2, a tiny, tiny bit modified



==== FUNCTIONS

general

    TO READ IMAGES:
        utils.readImageNName(impath1)
            impath1: path of file, relative

            returns: tuple of (<image ndarray>, <name of input file>)

    TO SAVE IMAGES:
        utils.printImage(directory, name, im, disp=False):
            directory: directory to save file to, relative
            name: desired name for image
            im: image ndarray
            disp: whether to show a matplotlib plot in the process



pt. 1.1

    UNSHARPING:
        operations.unsharpOp(im, alpha, sigma)
            im: image, can be grayscale or rgb
            alpha: alpha of gaussian kernel used
            sigma: sigma of gaussian kernel used

            return: ndarray, unsharped image

pt. 1.2

    HYBRID IMAGES:
        operations.hybridImageOp(im1, im2, sigma1, sigma2, alignPts = None)
            im1: ndarray. first image, will be low-passed, HAS TO BE RGB
            im2: ndarray. second image, will be high-passed, HAS TO BE RGB
            sigma1: int. kernel of gaussian for low-passed im1
            sigma2: int. kernel of gaussian for high-passed im2 (= im2 - gaussian_blurred(im2))
            alignPts: tuple, optional. if set to None, you pick alignment points manually. current set up is that if you pick manually, these points will be printed out on console. you can then pass those points into this argument (same format, literal copy paste) to automate the point-picking process.

            returns: ndarray, hybridized image


pt. 1.3

    GAUSSIAN STACK:
        operations.gaussStackOp_3D(im, levels, sigma)
            im: ndarray, RGB image to make gaussian stack of
            levels: int, how many levels of gaussian stack
            sigma: int or float, sigma of gaussian kernel

    LAPLACIAN STACK:
        operations.laplacianPyrOp_3D(im, levels, sigma, scaleB = False)
            im: ndarray, RGB to make a laplacian stack of
            levels: int, how many levels
            signa: int or float, sigma of gaussian kernel
            scaleB: bool, optional. set this to True if you want to print the images out and see anything in the plots.

pt. 1.4

    MULTI-RESOLUTION BLENDING:
        operations.multiResBlendOp(im1, im2, mask, levels, sigma)
            im1: ndarray, first image
            im2: ndarray, second image
            mask: ndarray, mask, RGB black and white picture
            levels: how many levels for laplacian
            sigma: sigma for laplacian

pt 2.1


    TOY PROBLEM:
        operations.gradFusionOp(targetYX, imTarg, imSrc, srcMask, toyProb=False)
            targetYX: ***SET THIS TO `(0,0)`***
            imTarg: ndarray, put in `toy_problem.jpg`
            imSrc: ndarray, put in `toy_problem.jpg`
            srcMask: ndarray, put in either `toy_problem_mask.jpg` or an all white RGB or Grayscale image same dimensions as toy_problem.jpg
            toyProb: ***SET THIS TO TRUE!***, this just adds the top-left corner pixel constraint

            note: this is honestly more made for 2.2, hence there's a lot of extraneous stuff. but, it works for 2.1. 2.1 is just a less general version of 2.2, hence the decision. i somewhat regret it now.

pt 2.2

    POISSON BLENDING:
         operations.gradFusionOp(targetYX, imTarg, imSrc, srcMask, toyProb=False)
            targetYX: tuple, set this to where you want the upper top-left corner of mask/source image to sit on the target image
            imTarg: ndarray
            imSrc: ndarray, should be smaller than imTarg
            srcMask: ndarray, should be same width and height of imSrc
            toyProb: ***SET THIS TO FALSE!***



